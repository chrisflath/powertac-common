package org.powertac.common

/**
 * File generated by Spring Security for user management
 */

import org.apache.commons.lang.builder.HashCodeBuilder

class BrokerRole implements Serializable {

	Broker broker
	Role role

	boolean equals(other) {
		if (!(other instanceof BrokerRole)) {
			return false
		}

		other.broker?.id == broker?.id &&
			other.role?.id == role?.id
	}

	int hashCode() {
		def builder = new HashCodeBuilder()
		if (broker) builder.append(broker.id)
		if (role) builder.append(role.id)
		builder.toHashCode()
	}

	static BrokerRole get(long brokerId, long roleId) {
		find 'from BrokerRole where broker.id=:brokerId and role.id=:roleId',
			[brokerId: brokerId, roleId: roleId]
	}

	static BrokerRole create(Broker broker, org.powertac.common.Role role, boolean flush = false) {
		new BrokerRole(broker: broker, role: role).save(flush: flush, insert: true)
	}

	static boolean remove(Broker broker, org.powertac.common.Role role, boolean flush = false) {
		BrokerRole instance = BrokerRole.findByBrokerAndRole(broker, role)
		instance ? instance.delete(flush: flush) : false
	}

	static void removeAll(Broker broker) {
		executeUpdate 'DELETE FROM BrokerRole WHERE broker=:broker', [broker: broker]
	}

	static void removeAll(org.powertac.common.Role role) {
		executeUpdate 'DELETE FROM BrokerRole WHERE role=:role', [role: role]
	}

	static mapping = {
		id composite: ['role', 'broker']
		version false
	}
}
